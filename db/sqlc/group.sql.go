// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: group.sql

package db

import (
	"context"
	"database/sql"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO "group" (
    hostid
) VALUES (
    $1
) RETURNING groupid, hostid, active, created_at
`

func (q *Queries) CreateGroup(ctx context.Context, hostid int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, hostid)
	var i Group
	err := row.Scan(
		&i.Groupid,
		&i.Hostid,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const getGroupByHost = `-- name: GetGroupByHost :one
SELECT groupid, hostid, active, created_at FROM "group"
WHERE hostid = $1
`

func (q *Queries) GetGroupByHost(ctx context.Context, hostid int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupByHost, hostid)
	var i Group
	err := row.Scan(
		&i.Groupid,
		&i.Hostid,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const listGroupByGuest = `-- name: ListGroupByGuest :many
SELECT "group".groupid, hostid, active, "group".created_at, invite.groupid, guestid, accepted, invite.created_at FROM "group"
NATURAL JOIN "invite"
WHERE guestid = $1
`

type ListGroupByGuestRow struct {
	Groupid     int64        `json:"groupid"`
	Hostid      int64        `json:"hostid"`
	Active      sql.NullBool `json:"active"`
	CreatedAt   sql.NullTime `json:"created_at"`
	Groupid_2   int64        `json:"groupid_2"`
	Guestid     int64        `json:"guestid"`
	Accepted    sql.NullBool `json:"accepted"`
	CreatedAt_2 sql.NullTime `json:"created_at_2"`
}

func (q *Queries) ListGroupByGuest(ctx context.Context, guestid int64) ([]ListGroupByGuestRow, error) {
	rows, err := q.db.QueryContext(ctx, listGroupByGuest, guestid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListGroupByGuestRow{}
	for rows.Next() {
		var i ListGroupByGuestRow
		if err := rows.Scan(
			&i.Groupid,
			&i.Hostid,
			&i.Active,
			&i.CreatedAt,
			&i.Groupid_2,
			&i.Guestid,
			&i.Accepted,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
