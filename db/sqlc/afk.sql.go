// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: afk.sql

package db

import (
	"context"
	"database/sql"
)

const createAFK = `-- name: CreateAFK :one
INSERT INTO "afk" (
   userid
) VALUES (
    $1
) RETURNING afkid, userid, created_at
`

func (q *Queries) CreateAFK(ctx context.Context, userid sql.NullInt64) (Afk, error) {
	row := q.db.QueryRowContext(ctx, createAFK, userid)
	var i Afk
	err := row.Scan(&i.Afkid, &i.Userid, &i.CreatedAt)
	return i, err
}

const getAFKCount = `-- name: GetAFKCount :one
SELECT count(*) from "afk"
WHERE userid = $1
`

func (q *Queries) GetAFKCount(ctx context.Context, userid sql.NullInt64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAFKCount, userid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listAFK = `-- name: ListAFK :many
SELECT afkid, userid, created_at from "afk"
WHERE userid = $1
`

func (q *Queries) ListAFK(ctx context.Context, userid sql.NullInt64) ([]Afk, error) {
	rows, err := q.db.QueryContext(ctx, listAFK, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Afk{}
	for rows.Next() {
		var i Afk
		if err := rows.Scan(&i.Afkid, &i.Userid, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByAFKCount = `-- name: ListUsersByAFKCount :many
SELECT userid, username, count(*) from "afk"
JOIN "user" ON "user".discordid = "afk".userid 
GROUP BY userid, username
ORDER BY count(*) desc
LIMIT 15
`

type ListUsersByAFKCountRow struct {
	Userid   sql.NullInt64 `json:"userid"`
	Username string        `json:"username"`
	Count    int64         `json:"count"`
}

func (q *Queries) ListUsersByAFKCount(ctx context.Context) ([]ListUsersByAFKCountRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsersByAFKCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersByAFKCountRow{}
	for rows.Next() {
		var i ListUsersByAFKCountRow
		if err := rows.Scan(&i.Userid, &i.Username, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
