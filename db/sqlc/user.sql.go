// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
    discordid, username, telegramid
) VALUES (
    $1, $2, $3
) RETURNING discordid, username, telegramid, created_at
`

type CreateUserParams struct {
	Discordid  int64         `json:"discordid"`
	Username   string        `json:"username"`
	Telegramid sql.NullInt64 `json:"telegramid"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Discordid, arg.Username, arg.Telegramid)
	var i User
	err := row.Scan(
		&i.Discordid,
		&i.Username,
		&i.Telegramid,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE discordid = $1
`

func (q *Queries) DeleteUser(ctx context.Context, discordid int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, discordid)
	return err
}

const getUser = `-- name: GetUser :one
SELECT discordid, username, telegramid, created_at FROM "user"
WHERE discordid = $1
`

func (q *Queries) GetUser(ctx context.Context, discordid int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, discordid)
	var i User
	err := row.Scan(
		&i.Discordid,
		&i.Username,
		&i.Telegramid,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByTelegramId = `-- name: GetUserByTelegramId :one
SELECT discordid, username, telegramid, created_at FROM "user"
WHERE telegramid = $1
`

func (q *Queries) GetUserByTelegramId(ctx context.Context, telegramid sql.NullInt64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByTelegramId, telegramid)
	var i User
	err := row.Scan(
		&i.Discordid,
		&i.Username,
		&i.Telegramid,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT discordid, username, telegramid, created_at from "user"
ORDER BY discordid
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Discordid,
			&i.Username,
			&i.Telegramid,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTelegramId = `-- name: UpdateTelegramId :exec
UPDATE "user" SET telegramid = $2
WHERE discordid = $1
`

type UpdateTelegramIdParams struct {
	Discordid  int64         `json:"discordid"`
	Telegramid sql.NullInt64 `json:"telegramid"`
}

func (q *Queries) UpdateTelegramId(ctx context.Context, arg UpdateTelegramIdParams) error {
	_, err := q.db.ExecContext(ctx, updateTelegramId, arg.Discordid, arg.Telegramid)
	return err
}
